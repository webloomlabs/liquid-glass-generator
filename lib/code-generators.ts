import type { GlassConfig, ComponentConfig } from "@/app/page"

export function generateCSS(glassConfig: GlassConfig, componentConfig: ComponentConfig): string {
  const backgroundStyle =
    glassConfig.backgroundType === "image"
      ? `background-image: url('${glassConfig.backgroundImage}');
  background-position: center;
  background-size: cover;`
      : `background: linear-gradient(135deg, ${glassConfig.gradientFrom}, ${glassConfig.gradientTo});`

  return `/* Background styles */
body {
  ${backgroundStyle}
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Glassmorphism card effect */
.glass-card {
  backdrop-filter: blur(${glassConfig.blur}px) saturate(${glassConfig.saturation}%);
  -webkit-backdrop-filter: blur(${glassConfig.blur}px) saturate(${glassConfig.saturation}%);
  background-color: ${glassConfig.backgroundColor};
  border-radius: ${glassConfig.borderRadius}px;
  border: ${glassConfig.borderWidth}px solid ${glassConfig.borderColor};
  box-shadow: ${glassConfig.boxShadow};
  padding: 2rem;
  max-width: 24rem;
  width: 100%;
  color: white;
}

/* Component specific styles */
.glass-card img {
  border-radius: 50%;
  border: 4px solid rgba(255, 255, 255, 0.2);
}

.glass-card button {
  background-color: #059669;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  color: white;
  cursor: pointer;
  transition: background-color 0.2s;
}

.glass-card button:hover {
  background-color: #047857;
}

/* Generated by Liquid Glass Generator */`
}

export function generateTailwindCSS(glassConfig: GlassConfig, componentConfig: ComponentConfig): string {
  const blurClass = `blur-[${glassConfig.blur}px]`
  const saturateClass = `saturate-[${glassConfig.saturation}%]`
  const radiusClass =
    glassConfig.borderRadius <= 12
      ? `rounded-${Math.round(glassConfig.borderRadius / 4) || "lg"}`
      : `rounded-[${glassConfig.borderRadius}px]`

  return `<!-- Tailwind CSS Classes -->
<div class="min-h-screen flex items-center justify-center bg-cover bg-center"
     style="background-image: url('${glassConfig.backgroundImage}')">
  
  <div class="backdrop-${blurClass} backdrop-${saturateClass} 
              ${radiusClass} border border-white/20 
              shadow-xl p-8 max-w-sm w-full text-center text-white"
       style="background-color: ${glassConfig.backgroundColor};">
    
    <!-- Profile Image -->
    <div class="mb-6">
      <img src="${componentConfig.imageUrl}" 
           alt="${componentConfig.title}"
           class="w-30 h-30 rounded-full mx-auto border-4 border-white/20" />
    </div>
    
    <!-- Content -->
    <h2 class="text-2xl font-bold mb-2">${componentConfig.title}</h2>
    <p class="text-white/80 mb-4">${componentConfig.subtitle}</p>
    
    <button class="mb-4 bg-green-600 hover:bg-green-700 
                   text-white px-4 py-2 rounded transition-colors">
      ${componentConfig.buttonText}
    </button>
    
    <p class="text-white/70 text-sm leading-relaxed">
      ${componentConfig.description}
    </p>
  </div>
</div>

<!-- Custom backdrop-filter utilities (add to tailwind.config.js) -->
/*
module.exports = {
  theme: {
    extend: {
      backdropBlur: {
        '${glassConfig.blur}px': '${glassConfig.blur}px',
      },
      backdropSaturate: {
        '${glassConfig.saturation}%': '${glassConfig.saturation}%',
      }
    }
  }
}
*/`
}

export function generateHTML(componentConfig: ComponentConfig): string {
  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Glass Component</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="glass-card">
    <div class="text-center">
      <img src="${componentConfig.imageUrl}" 
           alt="${componentConfig.title}" 
           width="120" height="120">
      
      <h2>${componentConfig.title}</h2>
      <p class="subtitle">${componentConfig.subtitle}</p>
      
      <button>${componentConfig.buttonText}</button>
      
      <p class="description">${componentConfig.description}</p>
    </div>
  </div>
</body>
</html>`
}
